/**
 * NOTE: This class is auto generated by the swagger code generator program (2.3.1).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package com.desafio.scheduling.communication.api;

import com.desafio.scheduling.communication.model.ResponseError;
import com.desafio.scheduling.communication.model.SchedulingCreationRequest;
import com.desafio.scheduling.communication.model.SchedulingCreationResponse;
import com.desafio.scheduling.communication.model.SchedulingStatusResponse;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
@javax.annotation.Generated(value = "io.swagger.codegen.languages.SpringCodegen", date = "2021-06-16T23:39:48.919-03:00")

@Api(value = "communication", description = "the communication API")
public interface CommunicationApi {

    CommunicationApiDelegate getDelegate();

    @ApiOperation(value = "Cancela agendamento por id", nickname = "communicationIdDelete", notes = "Responsável por cancelar o agendamento através do id. Observação: agendamento só é cancelado caso não tenha sido enviado ainda", tags={ "Agendamento de Comunicação", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Sucesso"),
        @ApiResponse(code = 400, message = "Bad Request", response = ResponseError.class),
        @ApiResponse(code = 403, message = "Forbidden", response = ResponseError.class),
        @ApiResponse(code = 404, message = "Not Found", response = ResponseError.class),
        @ApiResponse(code = 500, message = "Erro Interno", response = ResponseError.class) })
    @RequestMapping(value = "/communication/{id}",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.DELETE)
    default ResponseEntity<Void> communicationIdDelete(@ApiParam(value = "ID do agendamento",required=true) @PathVariable("id") Integer id,@ApiParam(value = "Transaction ID" ) @RequestHeader(value="X-Correlation-ID", required=false) String xCorrelationID) {
        return getDelegate().communicationIdDelete(id, xCorrelationID);
    }


    @ApiOperation(value = "Consulta agendamento por id", nickname = "communicationIdGet", notes = "Responsável por consultar o agendamento através do id", response = SchedulingStatusResponse.class, tags={ "Agendamento de Comunicação", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Sucesso", response = SchedulingStatusResponse.class),
        @ApiResponse(code = 400, message = "Bad Request", response = ResponseError.class),
        @ApiResponse(code = 404, message = "Not Found", response = ResponseError.class),
        @ApiResponse(code = 500, message = "Erro Interno", response = ResponseError.class) })
    @RequestMapping(value = "/communication/{id}",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.GET)
    default ResponseEntity<SchedulingStatusResponse> communicationIdGet(@ApiParam(value = "ID do agendamento",required=true) @PathVariable("id") Integer id,@ApiParam(value = "Transaction ID" ) @RequestHeader(value="X-Correlation-ID", required=false) String xCorrelationID) {
        return getDelegate().communicationIdGet(id, xCorrelationID);
    }


    @ApiOperation(value = "Cria agendamento de comunicação", nickname = "communicationPost", notes = "Responsável por criar um novo agendamento de comunicação", response = SchedulingCreationResponse.class, tags={ "Agendamento de Comunicação", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Sucesso", response = SchedulingCreationResponse.class),
        @ApiResponse(code = 400, message = "Bad Request", response = ResponseError.class),
        @ApiResponse(code = 500, message = "Erro Interno", response = ResponseError.class) })
    @RequestMapping(value = "/communication/",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<SchedulingCreationResponse> communicationPost(@ApiParam(value = "Request Body" ,required=true )  @Valid @RequestBody SchedulingCreationRequest body,@ApiParam(value = "Transaction ID" ) @RequestHeader(value="X-Correlation-ID", required=false) String xCorrelationID) {
        return getDelegate().communicationPost(body, xCorrelationID);
    }

}
